import { NextResponse } from 'next/server'
import { withAuth } from '@/lib/auth/api-auth'
import { sendCoachInvitationEmail } from '@/lib/email-templates/coach-invitation'

/**
 * API para crear nuevas invitaciones de coaches
 * Solo accesible por administradores
 * 
 * @route POST /api/coaches/invite
 * @access Admin
 */
export const POST = withAuth(
  async (request, { user, profile, supabase }) => {
    console.log(`üîµ [API] Admin ${profile.nombre} ${profile.apellidos} creando invitaci√≥n...`)
    
    try {
      // Obtener datos del body
      const { email, categoria, mensaje, diasExpiracion = 7 } = await request.json()

      console.log('üîµ [API] Datos de invitaci√≥n:')
      console.log('  - Email:', email)
      console.log('  - Categor√≠a:', categoria)
      console.log('  - D√≠as expiraci√≥n:', diasExpiracion)

      // Validaciones
      if (!email || !categoria) {
        console.error('‚ùå [API] Faltan campos requeridos')
        return NextResponse.json(
          { error: 'Email y categor√≠a son requeridos' },
          { status: 400 }
        )
      }

      // Validar formato de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
      if (!emailRegex.test(email)) {
        console.error('‚ùå [API] Email inv√°lido:', email)
        return NextResponse.json(
          { error: 'Formato de email inv√°lido' },
          { status: 400 }
        )
      }

      // Validar categor√≠a
      const categoriasValidas = ['cycling', 'boxing', 'funcional', 'yoga', 'pilates']
      if (!categoriasValidas.includes(categoria)) {
        console.error('‚ùå [API] Categor√≠a inv√°lida:', categoria)
        return NextResponse.json(
          { error: 'Categor√≠a inv√°lida' },
          { status: 400 }
        )
      }

      // Verificar si ya existe una invitaci√≥n pendiente para este email
      const { data: existingInvitation } = await supabase
        .from('coach_invitations')
        .select('id, estado')
        .eq('email', email)
        .eq('estado', 'pendiente')
        .single()

      if (existingInvitation) {
        console.warn('‚ö†Ô∏è [API] Ya existe una invitaci√≥n pendiente para este email')
        return NextResponse.json(
          { error: 'Ya existe una invitaci√≥n pendiente para este email. Canc√©lala primero si deseas crear una nueva.' },
          { status: 409 }
        )
      }

      // Generar token √∫nico
      const token = crypto.randomUUID()
      
      // Calcular fecha de expiraci√≥n
      const expiraEn = new Date()
      expiraEn.setDate(expiraEn.getDate() + diasExpiracion)

      console.log('üîµ [API] Token generado:', token.substring(0, 20) + '...')
      console.log('üîµ [API] Expira en:', expiraEn.toISOString())

      // Crear invitaci√≥n en la base de datos
      const { data: invitacion, error: insertError } = await supabase
        .from('coach_invitations')
        .insert({
          email: email.toLowerCase().trim(),
          categoria,
          token,
          expira_en: expiraEn.toISOString(),
          estado: 'pendiente',
          mensaje_personalizado: mensaje || null,
          invitado_por: user.id
        })
        .select()
        .single()

      if (insertError) {
        console.error('‚ùå [API] Error al crear invitaci√≥n:', insertError)
        return NextResponse.json(
          { error: 'Error al crear la invitaci√≥n: ' + insertError.message },
          { status: 500 }
        )
      }

      console.log('‚úÖ [API] Invitaci√≥n creada con ID:', invitacion.id)

      // Generar URL de invitaci√≥n
      const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
      const inviteUrl = `${baseUrl}/onboarding/coach/${token}`

      console.log('üìß [API] URL de invitaci√≥n:', inviteUrl)

      // Enviar email de invitaci√≥n
      console.log('üìß [API] Enviando email...')
      try {
        const emailResult = await sendCoachInvitationEmail({
          to: email,
          categoria,
          inviteUrl,
          expiraDias: diasExpiracion,
          mensajePersonalizado: mensaje
        })
        
        console.log('‚úÖ [API] Email enviado exitosamente:', emailResult.emailId)
      } catch (emailError) {
        console.error('‚ùå [API] Error al enviar email:', emailError)
        console.error('‚ùå [API] Stack trace:', emailError.stack)
        // No fallamos la invitaci√≥n si el email falla
        // El admin puede reenviar manualmente
        console.warn('‚ö†Ô∏è [API] Invitaci√≥n creada pero email fall√≥ - Admin puede reenviar')
      }

      console.log('‚úÖ [API] Proceso completado exitosamente')

      return NextResponse.json({
        success: true,
        message: 'Invitaci√≥n creada y enviada exitosamente',
        invitation: {
          id: invitacion.id,
          email: invitacion.email,
          categoria: invitacion.categoria,
          expira_en: invitacion.expira_en,
          token: invitacion.token,
          inviteUrl
        }
      })

    } catch (error) {
      console.error('‚ùå [API] Error general en POST /api/coaches/invite:', error)
      console.error('‚ùå [API] Stack trace:', error.stack)
      return NextResponse.json(
        { error: 'Error interno del servidor: ' + error.message },
        { status: 500 }
      )
    }
  },
  { allowedRoles: ['admin'] }
)

/**
 * API para reenviar invitaciones existentes
 * Solo accesible por administradores
 * 
 * @route PUT /api/coaches/invite
 * @access Admin
 */
export const PUT = withAuth(
  async (request, { user, profile, supabase }) => {
    console.log(`üîµ [API] Admin ${profile.nombre} ${profile.apellidos} reenviando invitaci√≥n...`)
    
    try {
      // Obtener ID de invitaci√≥n del body
      const { invitationId } = await request.json()

      if (!invitationId) {
        console.error('‚ùå [API] ID de invitaci√≥n no proporcionado')
        return NextResponse.json(
          { error: 'ID de invitaci√≥n requerido' },
          { status: 400 }
        )
      }

      console.log('üîµ [API] Reenviando invitaci√≥n ID:', invitationId)

      // Obtener invitaci√≥n
      const { data: invitacion, error: fetchError } = await supabase
        .from('coach_invitations')
        .select('*')
        .eq('id', invitationId)
        .single()

      if (fetchError || !invitacion) {
        console.error('‚ùå [API] Invitaci√≥n no encontrada:', fetchError)
        return NextResponse.json(
          { error: 'Invitaci√≥n no encontrada' },
          { status: 404 }
        )
      }

      // Verificar que la invitaci√≥n est√© pendiente
      if (invitacion.estado !== 'pendiente') {
        console.error('‚ùå [API] Invitaci√≥n no est√° pendiente, estado:', invitacion.estado)
        return NextResponse.json(
          { error: `No se puede reenviar una invitaci√≥n con estado: ${invitacion.estado}` },
          { status: 400 }
        )
      }

      // Verificar si la invitaci√≥n ha expirado
      const ahora = new Date()
      const expiracion = new Date(invitacion.expira_en)

      if (expiracion < ahora) {
        console.error('‚ùå [API] Invitaci√≥n expirada')
        return NextResponse.json(
          { error: 'Esta invitaci√≥n ha expirado. Crea una nueva invitaci√≥n.' },
          { status: 400 }
        )
      }

      // Calcular d√≠as restantes
      const diasRestantes = Math.ceil(
        (expiracion - ahora) / (1000 * 60 * 60 * 24)
      )

      console.log('üîµ [API] D√≠as restantes de vigencia:', diasRestantes)

      // Generar URL de invitaci√≥n
      const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
      const inviteUrl = `${baseUrl}/onboarding/coach/${invitacion.token}`

      // Reenviar email
      console.log('üìß [API] Reenviando email a:', invitacion.email)
      
      try {
        await sendCoachInvitationEmail({
          to: invitacion.email,
          categoria: invitacion.categoria,
          inviteUrl,
          expiraDias: diasRestantes,
          mensajePersonalizado: invitacion.mensaje_personalizado
        })

        console.log('‚úÖ [API] Email reenviado exitosamente')

        return NextResponse.json({
          success: true,
          message: 'Invitaci√≥n reenviada exitosamente',
          diasRestantes
        })

      } catch (emailError) {
        console.error('‚ùå [API] Error al reenviar email:', emailError)
        return NextResponse.json(
          { error: 'Error al enviar el email. Verifica la configuraci√≥n de email.' },
          { status: 500 }
        )
      }

    } catch (error) {
      console.error('‚ùå [API] Error general en PUT /api/coaches/invite:', error)
      console.error('‚ùå [API] Stack trace:', error.stack)
      return NextResponse.json(
        { error: 'Error interno del servidor: ' + error.message },
        { status: 500 }
      )
    }
  },
  { allowedRoles: ['admin'] }
)