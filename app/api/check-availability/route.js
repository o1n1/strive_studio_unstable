import { NextResponse } from 'next/server'
import { createServiceClient } from '@/lib/auth/api-auth'
import { logger } from '@/lib/utils/logger'
import { validateEmail, validatePhone } from '@/lib/validations'

/**
 * API para verificar disponibilidad de email y tel√©fono
 * Endpoint P√öBLICO - No requiere autenticaci√≥n
 * 
 * @route POST /api/check-availability
 * @access Public
 */
export async function POST(request) {
  logger.log('üîµ Endpoint /api/check-availability llamado')

  try {
    // üõ°Ô∏è CSRF PROTECTION - Verificar origin
    const origin = request.headers.get('origin')
    const allowedOrigins = [
      process.env.NEXT_PUBLIC_SITE_URL,
      'http://localhost:3000',
      'https://localhost:3000'
    ].filter(Boolean)
    
    if (origin && !allowedOrigins.includes(origin)) {
      logger.warn(`‚ö†Ô∏è Origin no permitido: ${origin}`)
      return NextResponse.json(
        { success: false, error: 'Acceso no autorizado' },
        { status: 403 }
      )
    }

    // Validar Content-Type
    const contentType = request.headers.get('content-type')
    if (!contentType || !contentType.includes('application/json')) {
      logger.error('‚ùå Content-Type inv√°lido')
      return NextResponse.json(
        { success: false, error: 'Content-Type debe ser application/json' },
        { status: 400 }
      )
    }

    // Obtener datos del body
    const body = await request.json()
    const { email, telefono } = body

    logger.log('üìã Verificando disponibilidad:')
    if (email) logger.log('  - Email:', email)
    if (telefono) logger.log('  - Tel√©fono:', telefono)

    // Validar que al menos uno de los campos est√© presente
    if (!email && !telefono) {
      logger.error('‚ùå Ning√∫n campo proporcionado')
      return NextResponse.json(
        { success: false, error: 'Debes proporcionar email o tel√©fono para verificar' },
        { status: 400 }
      )
    }

    // Validar formato de email si se proporciona
    if (email && !validateEmail(email)) {
      logger.warn('‚ö†Ô∏è Email con formato inv√°lido:', email)
      return NextResponse.json(
        { success: false, error: 'Formato de email inv√°lido' },
        { status: 400 }
      )
    }

    // Validar formato de tel√©fono si se proporciona
    if (telefono && !validatePhone(telefono)) {
      logger.warn('‚ö†Ô∏è Tel√©fono con formato inv√°lido:', telefono)
      return NextResponse.json(
        { success: false, error: 'Formato de tel√©fono inv√°lido' },
        { status: 400 }
      )
    }

    // Crear cliente Supabase con Service Role
    const supabase = createServiceClient()

    // Preparar resultados
    const results = {}

    // Verificar email si se proporciona
    if (email) {
      const emailNormalizado = email.toLowerCase().trim()
      
      // Verificar en tabla profiles
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('id, email')
        .eq('email', emailNormalizado)
        .maybeSingle()

      if (profileError) {
        logger.error('‚ùå Error al verificar email en profiles:', profileError)
        return NextResponse.json(
          { success: false, error: 'Error al verificar disponibilidad de email' },
          { status: 500 }
        )
      }

      results.emailDisponible = !profileData
      results.emailMensaje = profileData ? 'Email ya est√° registrado' : 'Email disponible'
      
      if (profileData) {
        logger.log(`‚ö†Ô∏è Email ${emailNormalizado} ya registrado`)
      } else {
        logger.log(`‚úÖ Email ${emailNormalizado} disponible`)
      }
    }

    // Verificar tel√©fono si se proporciona
    if (telefono) {
      const telefonoNormalizado = telefono.replace(/\s+/g, '').trim()
      
      // Verificar en tabla profiles
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('id, telefono')
        .eq('telefono', telefonoNormalizado)
        .maybeSingle()

      if (profileError) {
        logger.error('‚ùå Error al verificar tel√©fono en profiles:', profileError)
        return NextResponse.json(
          { success: false, error: 'Error al verificar disponibilidad de tel√©fono' },
          { status: 500 }
        )
      }

      results.telefonoDisponible = !profileData
      results.telefonoMensaje = profileData ? 'Tel√©fono ya est√° registrado' : 'Tel√©fono disponible'
      
      if (profileData) {
        logger.log(`‚ö†Ô∏è Tel√©fono ${telefonoNormalizado} ya registrado`)
      } else {
        logger.log(`‚úÖ Tel√©fono ${telefonoNormalizado} disponible`)
      }
    }

    logger.log('‚úÖ Verificaci√≥n completada:', results)

    return NextResponse.json({
      success: true,
      ...results
    })

  } catch (error) {
    logger.error('üí• Error inesperado en check-availability:', error)
    logger.error('üí• Stack trace:', error.stack)
    
    return NextResponse.json(
      { success: false, error: 'Error inesperado al verificar disponibilidad' },
      { status: 500 }
    )
  }
}